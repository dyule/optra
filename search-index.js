var searchIndex = {};
searchIndex["optra"] = {"doc":"An engine for keeping remote siles synchronized.","items":[[3,"InsertOperation","optra","Represents an operation which inserts data into a file",null,null],[3,"DeleteOperation","","Represents an operation which removes data from a file",null,null],[3,"Engine","","Process file change operations in such a way that they can be synchronized across sites",null,null],[3,"TransactionSequence","","Represents a sequence of transactions that can be performed on a file.",null,null],[12,"inserts","","The inserts for this sequence, stored in effect order",0,null],[12,"deletes","","The deletes for this sequence, stored in effect order",0,null],[3,"TimeStamper","","Tracks the relationship between local timestamps and the timestamp on remote machines.",null,null],[3,"OTError","","Represents an error in attempting to synchronize remote operations",null,null],[12,"kind","","The kind of error this is",1,null],[4,"ErrorKind","","Represents the kind of error we encountered synchronizing operations",null,null],[13,"NoSuchState","","The remote operations refer to a state that we have not yet recieved",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"new","","Creates a new `InsertOperation` that will insert the bytes represented by `value` in a file at location `position`",3,{"inputs":[{"name":"u64"},{"name":"vec"},{"name":"u32"},{"name":"u32"}],"output":{"name":"insertoperation"}}],[11,"get_value","","Gets the bytes that will be inserted when this operation is applied",3,null],[11,"compress_to","","Compress this operation and write to `writer`.  The output can then be expanded\nback into an equivilent operation using `expand_from()`.  If `include_site_id` is set to true\nThen the site id is saved alongside everyhting else.  If this is the case, then when expanding\na timestamp lookup should not be passed in.",3,null],[11,"expand_from","","Expand this operation from previously compressed data in `reader`.  The data in reader\nshould have been written using `compress_to()`",3,{"inputs":[{"name":"r"},{"name":"option"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DeleteOperation` that woll delete `length` bytes at `position` in a file",4,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u32"}],"output":{"name":"deleteoperation"}}],[11,"get_length","","Gets the number of bytes that will be removed when the delete operation is applied",4,null],[11,"compress_to","","Compress this operation and write to `writer`.  The output can then be expanded\nback into an equivilent operation using `expand_from()`",4,null],[11,"expand_from","","Expand this operation from previously compressed data in `reader`.  The data in reader\nshould have been written using `compress_to()`",4,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_position","","",3,null],[11,"get_increment","","",3,null],[11,"get_timestamp","","",3,null],[11,"set_timestamp","","",3,null],[11,"get_position","","",4,null],[11,"get_increment","","",4,null],[11,"get_timestamp","","",4,null],[11,"set_timestamp","","",4,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"new","","Creates a new engine for the given site id.  The id should be\nunique across all clients, and probably generated by the server",5,{"inputs":[{"name":"u32"}],"output":{"name":"engine"}}],[11,"process_diffs","","Convert the diffs we got from analyzing a file into a TransactionSequence\nwe can send to another site for synchronization.",5,null],[11,"integrate_remote","","Integrates the sequence of operations given by `remote_sequence` into the local history.  The ordering\nproperties of the local history will be maintained, and a sequence of operations that\ncan be applied to the local state will be returned.",5,null],[11,"process_transaction","","Processes a series of operations prior to being sent out to remote sites.  The operations must\nhave been performed on the data after every operation in the local history, but no others.  The\noperations in the transaction must also be effect order, with the inserts preceding the deletes.",5,null],[11,"get_operations_since","","Get all the operations since, but not including the given state",5,null],[11,"compress_to","","Compress this engine and write to `writer`.  The output can then be expanded\nback into an equivilent Engine using `expand_from()`",5,null],[11,"expand_from","","Expand this engine from previously compressed data in `reader`.  The data in reader\nshould have been written using `compress_to()`",5,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"new","","Create a new `TimeStamper`, with no stamps yet assigned",6,{"inputs":[],"output":{"name":"timestamper"}}],[11,"stamp_remote","","Stamp a remote operation corrsponding to the given site_id and remtoe timestamp\nwith a local timestamp.  If this remote id has never been stamped before, then\nassign it a new timestamp, sequentially after the previous one.  If it has, the\npreviously assigned timestamp is returned",6,null],[11,"stamp_local","","Stamp a local operation.  This will always create a new timestamp",6,null],[11,"get_local_timestamp_for","","Gets the local timestamp corresponding to a given remote site_id and remote timestamp",6,null],[11,"get_timestamps_since","","Gets a mapping of timestamps since the given remote site_id and remote timesamp, ordered sequentially, or none if the remote timestamp isn&#39;t in the lookup",6,null],[11,"get_last_timestamp","","Gets the most recent timestamp this stamper has assigned, or None if it has not yet assigned a timestamp.\nThe timestamp contains both the local and remote timestamps",6,null],[11,"compress_to","","Compresses this `TimeStamper` to an output source.  This can then be\nexpanded again using `expand_from`",6,null],[11,"expand_from","","Expands a `TimeStamper` from an input source that was previous written to\nby `compress_to()`",6,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"new","","Construct a new `TransactionSequence` from the given operations and metadata\n`last_timestamp` is the last stamp that was assigned before this operation was created\n`timestamp_lookup` is a mapping between local timestamps and their remote counterparts",0,{"inputs":[{"name":"option"},{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"transactionsequence"}}],[11,"apply","","Apply the operations in this sequence to a file.  This should not be called until after\nthe sequence has been integrated via [`Engine::integrate_remote`](struct.Engine.html#method.integrate_remote)\nThe file must have been opened on both read and write mode (see [OpenOptions](https://doc.rust-lang.org/nightly/std/fs/struct.OpenOptions.html)).",0,null],[11,"compress_to","","Compress this transaction and write to `writer`.  The output can then be expanded\nback into an equivilent Transaction using `expand_from()`",0,null],[11,"expand_from","","Expand this transaction from previously compressed data in `reader`.  The data in reader\nshould have been written using `compress_to()`",0,{"inputs":[{"name":"r"},{"name":"option"}],"output":{"name":"result"}}],[8,"Operation","","An operation that will make a change to a file.",null,null],[10,"get_position","","Gets the position this operation will be perfomed at",7,null],[10,"get_increment","","Gets the size change this operation will perform.  For insert operations, it&#39;s the\nlength of the data they will insert.  For delete operations, it&#39;s the length\nof the data they will delete",7,null],[10,"get_timestamp","","Gets the current local timestamp of this operation",7,null],[10,"set_timestamp","","Sets the local timestamp of this operation",7,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"new","","Create a new OTError of the given kind.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"oterror"}}]],"paths":[[3,"TransactionSequence"],[3,"OTError"],[4,"ErrorKind"],[3,"InsertOperation"],[3,"DeleteOperation"],[3,"Engine"],[3,"TimeStamper"],[8,"Operation"]]};
initSearch(searchIndex);
